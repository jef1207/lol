import os
import sqlite3
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv
from PIL import Image, ImageDraw
import spacy
from gtts import gTTS
import yaml

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ NLP
nlp = spacy.load("ru_core_news_sm")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open("config.yaml", "r") as f:
    config = yaml.safe_load(f)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FSM
storage = MemoryStorage()
load_dotenv()
bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class AddItem(StatesGroup):
    waiting_for_photo = State()
    waiting_for_description = State()
    waiting_for_location = State()

class FindItem(StatesGroup):
    waiting_for_query = State()

class SetupMap(StatesGroup):
    waiting_for_map = State()
    waiting_for_coords = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('home_finder.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS items (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        name TEXT,
        description TEXT,
        photo_id TEXT,
        tags TEXT,
        location TEXT,
        map_x INTEGER,
        map_y INTEGER,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        last_used TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS maps (
        user_id INTEGER PRIMARY KEY,
        map_image TEXT,
        width INTEGER,
        height INTEGER
    )
    ''')
    
    conn.commit()
    conn.close()

init_db()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤
def generate_tags(text):
    doc = nlp(text)
    tags = [token.lemma_.lower() for token in doc if token.pos_ in ("NOUN", "PROPN") and not token.is_stop]
    return list(set(tags))[:5]

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—É
def mark_on_map(user_id, x, y):
    conn = sqlite3.connect('home_finder.db')
    cursor = conn.cursor()
    cursor.execute("SELECT map_image, width, height FROM maps WHERE user_id = ?", (user_id,))
    map_data = cursor.fetchone()
    
    if map_data:
        map_path, width, height = map_data
        img = Image.open(map_path)
        draw = ImageDraw.Draw(img)
        draw.ellipse((x-10, y-10, x+10, y+10), outline='red', width=3)
        marked_path = f"maps/marked_{user_id}.jpg"
        img.save(marked_path)
        return marked_path
    return None

# –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
def create_voice_response(text):
    tts = gTTS(text=text, lang='ru')
    voice_path = f"voice/{datetime.now().strftime('%Y%m%d%H%M%S')}.mp3"
    tts.save(voice_path)
    return voice_path

# ================== –ö–û–ú–ê–ù–î–´ ================== #
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    text = (
        "üè† *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HomeFinderBot!*\n"
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –≤–µ—â–∏ –≤ –≤–∞—à–µ–º –¥–æ–º–µ.\n\n"
        "üîπ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≤–µ—â—å\n"
        "/find - –ù–∞–π—Ç–∏ –≤–µ—â—å\n"
        "/map - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—Ç—É –∫–≤–∞—Ä—Ç–∏—Ä—ã\n"
        "/cleanup - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±—ã—Ç—ã–µ –≤–µ—â–∏"
    )
    await message.answer(text, parse_mode="Markdown")

@dp.message_handler(commands=['map'])
async def cmd_map(message: types.Message):
    await SetupMap.waiting_for_map.set()
    await message.answer("üì± –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ö–µ–º—É –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ):")

@dp.message_handler(state=SetupMap.waiting_for_map, content_types=types.ContentType.PHOTO)
async def process_map_photo(message: types.Message, state: FSMContext):
    if message.photo:
        photo = message.photo[-1]
        os.makedirs("maps", exist_ok=True)
        map_path = f"maps/map_{message.from_user.id}.jpg"
        await photo.download(destination_file=map_path)
        
        await state.update_data(map_path=map_path)
        await SetupMap.next()
        await message.answer("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–∞ –¥–ª—è –º–µ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: X Y\n(–ù–∞–ø—Ä–∏–º–µ—Ä: 150 200)")

@dp.message_handler(state=SetupMap.waiting_for_coords)
async def process_map_coords(message: types.Message, state: FSMContext):
    try:
        x, y = map(int, message.text.split())
        user_data = await state.get_data()
        map_path = user_data['map_path']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        conn = sqlite3.connect('home_finder.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with Image.open(map_path) as img:
            width, height = img.size
        
        cursor.execute(
            "INSERT OR REPLACE INTO maps (user_id, map_image, width, height) VALUES (?, ?, ?, ?)",
            (message.from_user.id, map_path, width, height)
        )
        conn.commit()
        conn.close()
        
        await state.finish()
        await message.answer("‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤–µ—â–∏.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.message_handler(commands=['add'])
async def cmd_add(message: types.Message):
    await AddItem.waiting_for_photo.set()
    await message.answer("üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –≤–µ—â—å:")

@dp.message_handler(state=AddItem.waiting_for_photo, content_types=types.ContentType.PHOTO)
async def process_item_photo(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    await state.update_data(photo_id=photo.file_id)
    await AddItem.next()
    await message.answer("‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–µ—â—å –∏ –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è:\n–ü—Ä–∏–º–µ—Ä: '–ü–∞—Å–ø–æ—Ä—Ç –≤ —Å–∏–Ω–µ–π –ø–∞–ø–∫–µ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–∫–µ —à–∫–∞—Ñ–∞'")

@dp.message_handler(state=AddItem.waiting_for_description)
async def process_item_description(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    tags = generate_tags(message.text)
    
    await state.update_data(description=message.text, tags=",".join(tags))
    await AddItem.next()
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ì–æ—Å—Ç–∏–Ω–∞—è", "–°–ø–∞–ª—å–Ω—è", "–ö—É—Ö–Ω—è", "–í–∞–Ω–Ω–∞—è", "–ö–∞–±–∏–Ω–µ—Ç")
    await message.answer("üìç –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=markup)

@dp.message_handler(state=AddItem.waiting_for_location)
async def process_item_location(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    conn = sqlite3.connect('home_finder.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT INTO items (user_id, name, description, photo_id, tags, location, last_used)
    VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (
        message.from_user.id,
        user_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
        user_data['description'],
        user_data['photo_id'],
        user_data['tags'],
        message.text,
        datetime.now()
    ))
    
    conn.commit()
    conn.close()
    
    await state.finish()
    await message.answer(f"‚úÖ –í–µ—â—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–≥–∏: {user_data['tags']}", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(commands=['find'])
async def cmd_find(message: types.Message):
    await FindItem.waiting_for_query.set()
    await message.answer("üîç –ß—Ç–æ –∏—â–µ–º? –û–ø–∏—à–∏—Ç–µ –≤–µ—â—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")

@dp.message_handler(state=FindItem.waiting_for_query, content_types=[types.ContentType.TEXT, types.ContentType.VOICE])
async def process_find_query(message: types.Message, state: FSMContext):
    if message.voice:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
        await message.answer("üîá –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç.")
        return
    
    query = message.text.lower()
    conn = sqlite3.connect('home_finder.db')
    cursor = conn.cursor()
    
    # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º
    cursor.execute("SELECT * FROM items WHERE user_id = ?", (message.from_user.id,))
    items = cursor.fetchall()
    
    results = []
    for item in items:
        item_id, _, name, description, photo_id, tags, location, *_, last_used = item
        if query in tags or query in description.lower():
            results.append(item)
    
    if results:
        for item in results[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            _, _, name, description, photo_id, _, location, *_, _ = item
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=photo_id,
                caption=f"üìç *{location}*\n{description}",
                parse_mode="Markdown"
            )
            
            # –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
            voice_path = create_voice_response(f"–í–µ—â—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ {location}. {description}")
            await bot.send_voice(chat_id=message.chat.id, voice=open(voice_path, 'rb'))
            os.remove(voice_path)
    else:
        await message.answer("üò¢ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.")
    
    await state.finish()

@dp.message_handler(commands=['cleanup'])
async def cmd_cleanup(message: types.Message):
    conn = sqlite3.connect('home_finder.db')
    cursor = conn.cursor()
    
    month_ago = datetime.now() - timedelta(days=30)
    cursor.execute("SELECT * FROM items WHERE user_id = ? AND last_used < ?", 
                  (message.from_user.id, month_ago))
    old_items = cursor.fetchall()
    
    if old_items:
        response = "üìÖ –í–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞:\n\n"
        for item in old_items:
            _, _, name, _, _, _, location, *_, _ = item
            response += f"‚Ä¢ {name} ({location})\n"
        
        await message.answer(response)
    else:
        await message.answer("üéâ –í—Å–µ –≤–∞—à–∏ –≤–µ—â–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–µ–¥–∞–≤–Ω–æ! –ù–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã—Ç–æ.")

if __name__ == '__main__':
    os.makedirs("maps", exist_ok=True)
    os.makedirs("voice", exist_ok=True)
    executor.start_polling(dp, skip_updates=True)
